diff --git a/./EPOS_INIT/ine5424/include/synchronizer.h b/./SO2/exe2/EPOS/include/synchronizer.h
index 326a39f..1edb4c9 100644
--- a/./EPOS_INIT/ine5424/include/synchronizer.h
+++ b/./SO2/exe2/EPOS/include/synchronizer.h
@@ -12,6 +12,7 @@ class Synchronizer_Common
 {
 protected:
     Synchronizer_Common() {}
+    ~Synchronizer_Common() { wakeup_all(); }

     // Atomic operations
     bool tsl(volatile bool & lock) { return CPU::tsl(lock); }
@@ -22,12 +23,54 @@ protected:
     void begin_atomic() { Thread::lock(); }
     void end_atomic() { Thread::unlock(); }

-    void sleep() { Thread::yield(); } // implicit unlock()
-    void wakeup() { end_atomic(); }
-    void wakeup_all() { end_atomic(); }
+    void sleep() {
+        Thread* previous = Thread::running();
+        previous->_state = Thread::WAITING;
+        queue.insert(&previous->_link);
+
+        if(!Thread::_ready.empty()) {
+            Thread::_running = previous->nextThread();
+            Thread::_running->_state = Thread::RUNNING;
+            Thread::dispatch(previous, Thread::_running);
+        } else {
+            Thread::idle();
+        }
+
+        end_atomic();
+    }
+    void wakeup() {
+        if(!queue.empty()) {
+            wakeupThread();
+        }
+
+        end_atomic();
+
+        if(Thread::preemptive)
+            Thread::reschedule();
+    }
+    void wakeup_all() {
+        begin_atomic();
+
+        while(!queue.empty()) {
+            wakeupThread();
+        }
+
+        end_atomic();
+
+        if(Thread::preemptive)
+            Thread::reschedule();
+    }
+
+    void wakeupThread(){
+        Thread* syncThread = queue.remove()->object();
+        syncThread->_state = Thread::READY;
+        Thread::notifyNewReady(syncThread);
+    }
+
+private:
+    Thread::Queue queue;
 };

 __END_SYS

 #endif
-
diff --git a/./EPOS_INIT/ine5424/include/thread.h b/./SO2/exe2/EPOS/include/thread.h
index 28888ae..ab5416d 100644
--- a/./EPOS_INIT/ine5424/include/thread.h
+++ b/./SO2/exe2/EPOS/include/thread.h
@@ -69,6 +69,7 @@ public:
     ~Thread();

     const volatile State & state() const { return _state; }
+    static Thread * volatile nextThread() { return _ready.remove()->object(); }

     const volatile Priority & priority() const { return _link.rank(); }
     void priority(const Priority & p);
@@ -77,6 +78,7 @@ public:
     void pass();
     void suspend();
     void resume();
+    static void notifyNewReady(Thread * tReady);

     static Thread * volatile self() { return running(); }
     static void yield();
@@ -86,6 +88,7 @@ protected:
     void constructor_prolog(unsigned int stack_size);
     void constructor_epilog(const Log_Addr & entry, unsigned int stack_size);

+    void wakeup_joiners();
     static Thread * volatile running() { return _running; }

     static void lock() { CPU::int_disable(); }
@@ -108,6 +111,9 @@ protected:
     volatile State _state;
     Queue::Element _link;

+    Queue _joining;
+    Thread * _joined;
+
     static Scheduler_Timer * _timer;

 private:
diff --git a/./EPOS_INIT/ine5424/src/abstraction/mutex.cc b/./SO2/exe2/EPOS/src/abstraction/mutex.cc
index 7345f5c..2b8fdb0 100644
--- a/./EPOS_INIT/ine5424/src/abstraction/mutex.cc
+++ b/./SO2/exe2/EPOS/src/abstraction/mutex.cc
@@ -22,8 +22,7 @@ void Mutex::lock()

     begin_atomic();
     if(tsl(_locked))
-        while(tsl(_locked))
-            sleep(); // implicit end_atomic()
+        sleep(); // implicit end_atomic()
     else
         end_atomic();
 }
diff --git a/./EPOS_INIT/ine5424/src/abstraction/semaphore.cc b/./SO2/exe2/EPOS/src/abstraction/semaphore.cc
index a2e8f7a..029df86 100644
--- a/./EPOS_INIT/ine5424/src/abstraction/semaphore.cc
+++ b/./SO2/exe2/EPOS/src/abstraction/semaphore.cc
@@ -20,9 +20,11 @@ void Semaphore::p()
 {
     db<Synchronizer>(TRC) << "Semaphore::p(this=" << this << ",value=" << _value << ")" << endl;

-    fdec(_value);
-    while(_value < 0)
+    begin_atomic();
+    if(fdec(_value) < 1)
         sleep();
+    else
+        end_atomic();
 }


@@ -30,9 +32,11 @@ void Semaphore::v()
 {
     db<Synchronizer>(TRC) << "Semaphore::v(this=" << this << ",value=" << _value << ")" << endl;

-    finc(_value);
-    if(_value < 1)
+    begin_atomic();
+    if(finc(_value) < 0)
         wakeup();
+    else
+        end_atomic();
 }

 __END_SYS
diff --git a/./EPOS_INIT/ine5424/src/abstraction/semaphore_test.cc b/./SO2/exe2/EPOS/src/abstraction/semaphore_test.cc
index e4033f4..f56e22c 100644
--- a/./EPOS_INIT/ine5424/src/abstraction/semaphore_test.cc
+++ b/./SO2/exe2/EPOS/src/abstraction/semaphore_test.cc
@@ -11,7 +11,8 @@ using namespace EPOS;

 const int iterations = 10;

-Mutex table;
+// Mutex table;
+Semaphore table;

 Thread * phil[5];
 Semaphore * chopstick[5];
@@ -25,20 +26,24 @@ int philosopher(int n, int l, int c)

     for(int i = iterations; i > 0; i--) {

-        table.lock();
+        // table.lock();
+        table.p();
         Display::position(l, c);
         cout << "thinking";
-        table.unlock();
+        // table.unlock();
+        table.v();

         Delay thinking(2000000);

         chopstick[first]->p();   // get first chopstick
         chopstick[second]->p();   // get second chopstick

-        table.lock();
+        // table.lock();
+        table.p();
         Display::position(l, c);
         cout << " eating ";
-        table.unlock();
+        // table.unlock();
+        table.v();

         Delay eating(1000000);

@@ -46,17 +51,20 @@ int philosopher(int n, int l, int c)
         chopstick[second]->v();   // release second chopstick
     }

-    table.lock();
+    // table.lock();
+    table.p();
     Display::position(l, c);
     cout << "  done  ";
-    table.unlock();
+    // table.unlock();
+    table.v();

     return iterations;
 }

 int main()
 {
-    table.lock();
+    // table.lock();
+    table.p();
     Display::clear();
     Display::position(0, 0);
     cout << "The Philosopher's Dinner:" << endl;
@@ -66,8 +74,11 @@ int main()

     phil[0] = new Thread(&philosopher, 0,  5, 32);
     phil[1] = new Thread(&philosopher, 1, 10, 44);
+    Delay creating2(1000000);
     phil[2] = new Thread(&philosopher, 2, 16, 39);
+    Delay creating3(1000000);
     phil[3] = new Thread(&philosopher, 3, 16, 24);
+    Delay creating4(1000000);
     phil[4] = new Thread(&philosopher, 4, 10, 20);

     cout << "Philosophers are alive and hungry!" << endl;
@@ -85,14 +96,18 @@ int main()
     Display::position(19, 0);

     cout << "The dinner is served ..." << endl;
-    table.unlock();
+    // table.unlock();
+    table.v();

     for(int i = 0; i < 5; i++) {
+        Delay init(1000000);
         int ret = phil[i]->join();
-        table.lock();
+        // table.lock();
+        table.p();
         Display::position(20 + i, 0);
         cout << "Philosopher " << i << " ate " << ret << " times " << endl;
-        table.unlock();
+        // table.unlock();
+        table.v();
     }

     for(int i = 0; i < 5; i++)
diff --git a/./EPOS_INIT/ine5424/src/abstraction/thread.cc b/./SO2/exe2/EPOS/src/abstraction/thread.cc
index a398d0b..1cfbbf4 100644
--- a/./EPOS_INIT/ine5424/src/abstraction/thread.cc
+++ b/./SO2/exe2/EPOS/src/abstraction/thread.cc
@@ -3,6 +3,11 @@
 #include <system/kmalloc.h>
 #include <machine.h>
 #include <thread.h>
+#include <display.h>
+#include <utility/ostream.h>
+
+using namespace EPOS;
+OStream cout2;

 // This_Thread class attributes
 __BEGIN_UTIL
@@ -58,6 +63,12 @@ Thread::~Thread()
                     << ",context={b=" << _context
                     << "," << *_context << "})" << endl;

+    // Confirma que ninguém está esperando está thread
+    assert(_joining.empty());
+    // Se a thread deletada está esperando outra terminar, é removida da lista de joining da outra thread
+    if (_joined)
+        _joined->_joining.remove(&_link);
+
     _ready.remove(this);
     _suspended.remove(this);

@@ -66,15 +77,34 @@ Thread::~Thread()
     kfree(_stack);
 }

-
 int Thread::join()
 {
     lock();

     db<Thread>(TRC) << "Thread::join(this=" << this << ",state=" << _state << ")" << endl;

-    while(_state != FINISHING)
-        yield(); // implicit unlock()
+    // Display::position(20,0);
+    // int count = 1;
+    // while(_state != FINISHING){
+        // Display::position(20+count,0);
+        // cout2<<"Rodou:"<<count;
+        // count++;
+        //yield(); // implicit unlock()
+    if(_state != FINISHING){
+        _running->_joined = this;
+
+        Thread* previous = _running;
+        previous->_state = WAITING;
+        _joining.insert(&previous->_link);
+
+        if(!_ready.empty()) {
+            _running = previous->nextThread();
+            _running->_state = RUNNING;
+            Thread::dispatch(previous, _running);
+        }else{
+            idle(); // implicit unlock()
+        }
+    }

     unlock();

@@ -139,6 +169,18 @@ void Thread::resume()
    unlock();
 }

+void Thread::notifyNewReady(Thread * tReady)
+{
+    lock();
+
+    db<Thread>(TRC) << "Thread::notifyNewReady(tready = " << tReady << ")" << endl;
+
+    tReady->_state = READY;
+    _ready.insert(&tReady->_link);
+
+    unlock();
+}
+

 // Class methods
 void Thread::yield()
@@ -162,6 +204,23 @@ void Thread::yield()
     unlock();
 }

+void Thread::wakeup_joiners()
+{
+    lock();
+
+    db<Thread>(TRC) << "Thread::wakeup_joiners(this=" << this << ")" << endl;
+
+    Thread * joiner;
+
+    while(!_joining.empty()) {
+        joiner = _joining.remove()->object();
+        notifyNewReady(joiner); // implicit unlock()
+    }
+
+    unlock();
+}
+

 void Thread::exit(int status)
 {
@@ -169,6 +228,11 @@ void Thread::exit(int status)

     db<Thread>(TRC) << "Thread::exit(status=" << status << ") [running=" << running() << "]" << endl;

+    *reinterpret_cast<int *>(_running->_stack) = status;
+    _running->wakeup_joiners(); // implicit unlock();
+
+    lock();
+
     while(_ready.empty() && !_suspended.empty())
         idle(); // implicit unlock();

@@ -177,7 +241,6 @@ void Thread::exit(int status)
     if(!_ready.empty()) {
         Thread * prev = _running;
         prev->_state = FINISHING;
+         // *reinterpret_cast<int *>(_running->_stack) = status;
-         *reinterpret_cast<int *>(prev->_stack) = status;

         _running = _ready.remove()->object();
         _running->_state = RUNNING;
